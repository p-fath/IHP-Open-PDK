<?xml version="1.0" encoding="utf-8"?>
<!--
#==========================================================================
# Copyright 2024 IHP PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# SPDX-License-Identifier: Apache-2.0
#==========================================================================
-->
<klayout-macro>
 <description>Run Klayout LVS</description>
 <version>0.1</version>
 <category>lvs</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <priority>0</priority>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>Run Klayout LVS</group-name>
 <menu-path>sg13g2_menu&gt;end("SG13G2 PDK").end</menu-path>
 <interpreter>dsl</interpreter>
 <dsl-interpreter-name>lvs-dsl-xml</dsl-interpreter-name>
 <text>

require 'yaml'
require 'open3'

# Load LVS options from a YAML file
#
# yaml_file_path - The path to the YAML file
#
# Returns a hash containing the loaded options
def load_options(yaml_file_path)
  options = {}
  if File.exist?(yaml_file_path)
    begin
      options = YAML.safe_load(File.read(yaml_file_path))
    rescue => e
      puts "Error loading options from YAML file: #{e.message}"
    end
  else
    puts "YAML file not found at #{yaml_file_path}. Using default options."
    options = set_default_options(yaml_file_path)
  end
  options
end

# Set default LVS options and save them to a YAML file
#
# yaml_file_path - The path to the YAML file
#
# Returns a hash containing the default options
def set_default_options(yaml_file_path)
  default_options = {
    'netlist' => '',
    'top_cell' => '',
    'run_mode' => 'flat',
    'no_net_names' => false,
    'spice_comments' => false,
    'net_only' => false,
    'no_simplify' => false,
    'no_series_res' => false,
    'no_parallel_res' => false,
    'combine_devices' => false,
    'top_lvl_pins' => false,
    'purge' => false,
    'purge_nets' => false,
    'verbose' => false,
  }
  default_options
end

# check klayout version
klayout_v, _ = Open3.capture2('klayout -b -v')
klayout_v = klayout_v.split("\n")[0]
klayout_v_list = []

if klayout_v.empty?
  raise StandardError, "KLayout is not found. Please make sure KLayout is installed."
else
  klayout_v_arr = klayout_v.split(" ")[-1].scan(/[^.]+/)
  klayout_v_list = klayout_v_arr.map { |ele| ele.to_i }
end

if klayout_v_list.size &lt; 1 || klayout_v_list.size &gt; 3
  raise StandardError, "Was not able to get KLayout version properly."
elsif klayout_v_list.size &gt;= 2 || klayout_v_list.size &lt;= 3
  if klayout_v_list[1] &lt; 29
    puts "Using this KLayout version has not been assessed. Limits are unknown."
    raise StandardError, "Prerequisites at a minimum: KLayout 0.29.0"
  end
end
puts "Your KLayout version is: #{klayout_v}"

# Get testing dir path
dir_path = File.dirname(File.expand_path(__FILE__))

## reading the loaded gds file path
layout_path = Pathname.new(RBA::CellView.active.filename)

options = {}

# Load options from YAML file
yaml_file_path = File.join(ENV["HOME"], ".ihp_pdk", "ihp_sg13g2_lvs_options.yml")
options = load_options(yaml_file_path)

## reading netlist option to get netlist_path
if options['netlist'] == ''
  net_name = layout_path.split[1].to_s.split('.')[0]

  net_dir = "#{layout_path.split[0]}/#{net_name}.cir"
  net_dir = "#{layout_path.split[0]}/#{net_name}.spice" unless File.exist? net_dir
  net_dir = "#{layout_path.split[0]}/#{net_name}.cdl" unless File.exist? net_dir
else
  net_dir = options['netlist']
end

if !options["net_only"]
  unless File.exist?(net_dir)
    raise StandardError, "The netlist path #{net_dir} doesn't exist, please recheck"
  end
end

# input layout
$input = (layout_path.realpath).to_s

## passing options to lvs run file
$schematic = net_dir.to_s
$topcell = options['top_cell'].to_s
$run_mode = options['run_mode'].to_s
$no_net_names = options['no_net_names'].to_s
$spice_comments = options['spice_comments'].to_s
$net_only = options["net_only"].to_s
$no_simplify = options['no_simplify'].to_s
$no_series_res = options['no_series_res'].to_s
$no_parallel_res = options['no_parallel_res'].to_s
$combine_devices = options['combine_devices'].to_s
$top_lvl_pins = options['top_lvl_pins'].to_s
$purge = options['purge'].to_s
$purge_nets = options['purge_nets'].to_s
$verbose = options['verbose'].to_s

## include lvs run file
#%include ../lvs/sg13g2.lvs

</text>
</klayout-macro>
